require(data.table)
require(parallel)
require(gUtils)
require(data.table)
require(GenomicRanges)
require(parallel)
require(stats4)
require(BiocGenerics)
require(rlang)
require(S4Vectors)
require(IRanges)
require(GenomeInfoDb)
library(rstudioapi)
getSourceEditorContext()$path
print("Setting Working Directory")
getSourceEditorContext()$path
setwd(dirname(getSourceEditorContext()$path))
source('./scripts/processing_scripts.R') #store all source scripts for pre-processing
get_wd()
getwd()
source('./processing_scripts.R') #store all source scripts for pre-processing
source('./annotation_scripts.R')
chk <- filter('C:/Users/wchukwu/Downloads/GaTSV_toy.svaba.sv.vcf')
View(chk)
#reptimedata_hg38 = readRDS('./data/reptime.hg38.rds') #unfortunately, we haven't processed a hg38 equivalent of the replication timing reference file.
cohort_metadata <- fread("./data/20240417_cohort_metadata.csv")
#reptimedata_hg38 = readRDS('./data/reptime.hg38.rds') #unfortunately, we haven't processed a hg38 equivalent of the replication timing reference file.
cohort_metadata <- fread("../data/20240417_cohort_metadata.csv")
View(cohort_metadata)
example_metadata <- data.table(c('GaTSV',0))
colnames(example_metadata) <- c('sample','tp53_mutation_status') #uid is the same as the sam
example_metadata <- data.table(cbind('GaTSV',0))
colnames(example_metadata) <- c('sample','tp53_mutation_status') #uid is the same as the sam
View(example_metadata)
write.table(example_metadata,'../data/example_metadata.txt',col.names = T,row.names = F,quote = F,sep = '\t')
#reptimedata_hg38 = readRDS('./data/reptime.hg38.rds') #unfortunately, we haven't processed a hg38 equivalent of the replication timing reference file.
metadata <- fread("../data/example_metadata.txt")
source('./annotation_scripts.R')
run_it <- function(file,n_cores) {
bedpe <- file
bedpe[, chrom1 := gsub('chr','',chrom1)]
bedpe[, chrom2 := gsub('chr','',chrom2)]
fuzzy <- closest_germline(bp = bedpe, cores = n_cores, genome = 'hg19')
line_sine <- closest_line_sine(bp = fuzzy, genome = 'hg19', cores = n_cores)
cat("Finding distance to closest SV... \n")
nearest_sv_dist <- rbindlist(mclapply(1:nrow(line_sine), find_closest_sv, line_sine,mc.cores=n_cores))
cat("done. \n")
cat("Finding no of SVs in 5Mbp window... \n")
sv_annotated <- rbindlist(mclapply(1:nrow(nearest_sv_dist), count_sv_5mbp, nearest_sv_dist, mc.cores = n_cores))
cat("done. \n")
cat("Adding replication timing info... \n")
reptime_added <- rbindlist(mclapply(1:nrow(sv_annotated), rep_time, sv_annotated, genome='hg19', mc.cores = n_cores))
cat("done. \n")
return(reptime_added)
}
tmp <- run_it(file = chk, n_cores = 1)
cat('Loading reference files...\n')
gnomad_hg38 = readRDS('../data/gnomAD.v4.hg38.rds')
gnomad_hg19 = readRDS('../data/gnomAD.v4.hg19.liftover.rds')
LINE_dt_hg38 = readRDS('../data/repeatmasker.hg38.LINE.bed')
SINE_dt_hg38 = readRDS('../data/repeatmasker.hg38.SINE.bed')
LINE_dt_hg19 = readRDS('../data/repeatmasker.hg19.LINE.bed')
SINE_dt_hg19 = readRDS('../data/repeatmasker.hg19.SINE.bed')
hg19_genes = readRDS('../data/gencode.genes.hg19.rds')
hg19_exons=readRDS('../data/gencode.exons.hg19.rds')
hg38_genes=readRDS('../data/gencode.genes.hg38.rds')
hg38_exons=readRDS('../data/gencode.exons.hg38.rds')
reptimedata_hg19 = readRDS('../data/reptime.hg19.rds')
run_it <- function(file,n_cores,genome) {
bedpe <- file
bedpe[, chrom1 := gsub('chr','',chrom1)]
bedpe[, chrom2 := gsub('chr','',chrom2)]
fuzzy <- closest_germline(bp = bedpe, cores = n_cores, genome = genome)
line_sine <- closest_line_sine(bp = fuzzy, genome = genome, cores = n_cores)
cat("Finding distance to closest SV... \n")
nearest_sv_dist <- rbindlist(mclapply(1:nrow(line_sine), find_closest_sv, line_sine,mc.cores=n_cores))
cat("done. \n")
cat("Finding no of SVs in 5Mbp window... \n")
sv_annotated <- rbindlist(mclapply(1:nrow(nearest_sv_dist), count_sv_5mbp, nearest_sv_dist, mc.cores = n_cores))
cat("done. \n")
cat("Adding replication timing info... \n")
reptime_added <- rbindlist(mclapply(1:nrow(sv_annotated), rep_time, sv_annotated, genome=genome, mc.cores = n_cores))
cat("done. \n")
return(reptime_added)
}
tmp <- run_it(file = filt_file, n_cores = 1,genome='hg19')
tmp <- run_it(file = chk, n_cores = 1,genome='hg19')
chroms <-  c(as.character(c(1:22)),'X','Y')
tmp$chrom1 <- as.character(tmp$chrom1)
tmp$chrom2 <- as.character(tmp$chrom2)
store_indices = which(!tmp$chrom1 %in% chroms| !tmp$chrom2 %in% chroms) #done to address the observation that some SVs were mapping to hpv
bedpe_clean <- tmp[!store_indices,]
bedpe_clean$start1 <- as.numeric(bedpe_clean$start1)
bedpe_clean$start2 <- as.numeric(bedpe_clean$start2)
cat("Performing gene/exon annotation...")
bedpe_annot <- rbindlist(mclapply(1:nrow(bedpe_clean), annot_geneexon, bedpe_clean, genome='hg19',mc.cores = 1))
View(bedpe_clean)
bedpe_clean[which(start2<start1)]
View(tmp)
source('./annotation_scripts.R')
chk <- filter('C:/Users/wchukwu/Downloads/GaTSV_toy.svaba.sv.vcf')
run_it <- function(file,n_cores,genome) {
bedpe <- file
bedpe[, chrom1 := gsub('chr','',chrom1)]
bedpe[, chrom2 := gsub('chr','',chrom2)]
bedpe$start1 <- as.numeric(bedpe$start1)
bedpe$start2 <- as.numeric(bedpe$start2)
bedpe$end1 <- as.numeric(bedpe$end1)
bedpe$end2 <- as.numeric(bedpe$end2)
fuzzy <- closest_germline(bp = bedpe, cores = n_cores, genome = genome)
line_sine <- closest_line_sine(bp = fuzzy, genome = genome, cores = n_cores)
cat("Finding distance to closest SV... \n")
nearest_sv_dist <- rbindlist(mclapply(1:nrow(line_sine), find_closest_sv, line_sine,mc.cores=n_cores))
cat("done. \n")
cat("Finding no of SVs in 5Mbp window... \n")
sv_annotated <- rbindlist(mclapply(1:nrow(nearest_sv_dist), count_sv_5mbp, nearest_sv_dist, mc.cores = n_cores))
cat("done. \n")
cat("Adding replication timing info... \n")
reptime_added <- rbindlist(mclapply(1:nrow(sv_annotated), rep_time, sv_annotated, genome=genome, mc.cores = n_cores))
cat("done. \n")
return(reptime_added)
}
tmp <- run_it(file = chk, n_cores = 1,genome='hg19')
View(tmp)
chroms <-  c(as.character(c(1:22)),'X','Y')
tmp$chrom1 <- as.character(tmp$chrom1)
tmp$chrom2 <- as.character(tmp$chrom2)
store_indices = which(!tmp$chrom1 %in% chroms| !tmp$chrom2 %in% chroms) #done to address the observation that some SVs were mapping to hpv
bedpe_clean <- tmp[!store_indices,]
bedpe_clean$start1 <- as.numeric(bedpe_clean$start1)
bedpe_clean$start2 <- as.numeric(bedpe_clean$start2)
cat("Performing gene/exon annotation...")
bedpe_annot <- rbindlist(mclapply(1:nrow(bedpe_clean), annot_geneexon, bedpe_clean, genome='hg19',mc.cores = 1))
cat("done. \n")
cat("Checking TP53 status...")
tp53_added <- check_tp53(bedpe_annot)
cat("done. \n")
View(tp53_added)
View(bedpe_annot)
bedpe_annot <- rbindlist(mclapply(1:nrow(bedpe_clean), annot_geneexon, bedpe_clean, genome='hg19',mc.cores = 1))
View(bedpe_annot)
filename <- bedpe$sample[1]
filename <- bedpe_annot$sample[1]
metadata$tp53_mutation_status[which(metadata$sample == filename)]
source('./annotation_scripts.R')
tp53_added <- check_tp53(bedpe_annot)
View(tp53_added)
filename <- unlist(strsplit(tp53_added$name[1],"[.]"))[1]
write.table(tp53_added, paste0(filename,'_processed.bedpe'), row.names = F, col.names = T, sep = "\t", quote = F)
pHGG_testset <- readRDS('Z:/wolu/testing_svaba/outputs/20240327_svmupdates/pHGG_annot/20240425_pHGG_testset.rds')
View(pHGG_testset)
View(tp53_added)
require(stringr)
add_last_feat <- function(df) {
df <- as.data.table(df)
df$insertion_len <- nchar(df$INSERTION)
df$homlen <- nchar(df$HOMSEQ)
df[,hom_gc:= ifelse(nchar(HOMSEQ)>0, (str_count(HOMSEQ, 'G|C'))/nchar(HOMSEQ), 0)]
df[,insertion_gc:= ifelse(nchar(INSERTION)>0, (str_count(INSERTION, 'G|C'))/nchar(INSERTION), 0)]
df[, del:=ifelse(svtype=='DEL', 1, 0)]
df[, dup:=ifelse(svtype=='DUP', 1, 0)]
df[, inv:=ifelse(grepl('h2hINV | t2tINV', svtype), 1, 0)]
df[, inter:=ifelse(svtype=='INTER', 1, 0)]
return(df)
}
test <- add_last_feat(tp53_added)
View(test)
add_last_feat <- function(df) {
df <- as.data.table(df)
df$insertion_len <- nchar(df$INSERTION)
df$homlen <- nchar(df$HOMSEQ)
df[,hom_gc:= ifelse(nchar(HOMSEQ)>0, (str_count(HOMSEQ, 'G|C'))/nchar(HOMSEQ), 0)]
df[,insertion_gc:= ifelse(nchar(INSERTION)>0, (str_count(INSERTION, 'G|C'))/nchar(INSERTION), 0)]
df[, del:=ifelse(svtype=='DEL', 1, 0)]
df[, dup:=ifelse(svtype=='DUP', 1, 0)]
df[, inv:=ifelse(grepl(paste0('h2hINV', '|' ,'t2tINV'), svtype), 1, 0)]
df[, inter:=ifelse(svtype=='INTER', 1, 0)]
return(df)
}
test <- add_last_feat(tp53_added)
View(test)
test <- add_last_feat(tp53_added)
test <- test[SPAN>=1e3|SPAN==-1,] #use allthe long SVs for testing the svm
test[, log_SPAN := log(SPAN, base = 10)]
test$log_SPAN[which(is.na(test$log_SPAN))] <- max(subset(test$log_SPAN, !is.na(test$log_SPAN)))
test$log_SPAN[which(is.infinite(test$log_SPAN))] <- max(subset(test$log_SPAN, !is.infinite(test$log_SPAN)))
features_tolog <- c('homlen','insertion_len','gnomad_d_bkpt1','gnomad_d_bkpt2','line_dist','sine_dist','num_sv_sample',
'sv_dist','sv_count_5Mbp')
log_feat <- function(x){
log_x <- log(x, base = 10)
log_x[which(is.na(log_x))] <- min(subset(log_x, !is.na(log_x)))
log_x[which(is.infinite(log_x))] <- min(subset(log_x, !is.infinite(log_x)))
return((log_x))
}
test_sub_prelog <- test[, .SD,.SDcols = features_tolog]
test_sub_log <- data.table(apply(test_sub_prelog,2,FUN = log_feat))
add_last_feat <- function(df) {
df <- as.data.table(df)
df$insertion_len <- nchar(df$INSERTION)
df$homlen <- nchar(df$HOMSEQ)
df[,hom_gc:= ifelse(nchar(HOMSEQ)>0, (str_count(HOMSEQ, 'G|C'))/nchar(HOMSEQ), 0)]
df[,insertion_gc:= ifelse(nchar(INSERTION)>0, (str_count(INSERTION, 'G|C'))/nchar(INSERTION), 0)]
df[, del:=ifelse(svtype=='DEL', 1, 0)]
df[, dup:=ifelse(svtype=='DUP', 1, 0)]
df[, inv:=ifelse(grepl(paste0('h2hINV', '|' ,'t2tINV'), svtype), 1, 0)]
df[, inter:=ifelse(svtype=='INTER', 1, 0)]
sample_svs <- as.data.table(table(df$sample)) #number of SVs in each sample
colnames(sample_svs) <- c('sample','num_sv_sample')
df <- merge(df,sample_svs,by='sample')
return(df)
}
test <- add_last_feat(tp53_added)
View(test)
test$num_sv_sample
test <- test[SPAN>=1e3|SPAN==-1,] #use allthe long SVs for testing the svm
test[, log_SPAN := log(SPAN, base = 10)]
test$log_SPAN[which(is.na(test$log_SPAN))] <- max(subset(test$log_SPAN, !is.na(test$log_SPAN)))
test$log_SPAN[which(is.infinite(test$log_SPAN))] <- max(subset(test$log_SPAN, !is.infinite(test$log_SPAN)))
features_tolog <- c('homlen','insertion_len','gnomad_d_bkpt1','gnomad_d_bkpt2','line_dist','sine_dist','num_sv_sample',
'sv_dist','sv_count_5Mbp')
log_feat <- function(x){
log_x <- log(x, base = 10)
log_x[which(is.na(log_x))] <- min(subset(log_x, !is.na(log_x)))
log_x[which(is.infinite(log_x))] <- min(subset(log_x, !is.infinite(log_x)))
return((log_x))
}
test_sub_prelog <- test[, .SD,.SDcols = features_tolog]
test_sub_log <- data.table(apply(test_sub_prelog,2,FUN = log_feat))
colnames(test_sub_log) <- paste0('log_', colnames(test_sub_log))
test <- cbind(test, test_sub_log)
features_toscale<-c('log_homlen', 'log_insertion_len', 'log_SPAN', 'log_gnomad_d_bkpt1', 'log_gnomad_d_bkpt2', 'del', 'dup', 'inv', 'inter',
'hom_gc', 'insertion_gc', 'log_line_dist', 'log_sine_dist', 'log_num_sv_sample', 'CN_annot', 'exon_annot',
'log_sv_dist','log_sv_count_5Mbp', 'sv_reptime_left','sv_reptime_right','tp53_status')
test_df <- as.data.frame(test[,.SD,.SDcols=features_toscale]) #select the features to scale
test_scaled <- data.table()
scaling_mat <- fread("../data/20240423_scalingmatrix.txt")
GaTSV <- readRDS("../data/20240407_svm.rda")
for (i in colnames(test_df)){
row_l <- scaling_mat[which(scaling_mat$feature== i),]
feature_col <- test_df[grepl(i,colnames(test_df))]
scaled_feature <- (feature_col -(row_l$mean))/row_l$sd
test_scaled <- cbind(test_scaled,scaled_feature)
}
y_pred_radial <- predict(GaTSV, newdata = test_scaled, decision.values = T, probability = T)
library(ROCR)
y_pred_radial <- predict(GaTSV, newdata = test_scaled, decision.values = T, probability = T)
require(e1071)
y_pred_radial <- predict(GaTSV, newdata = test_scaled, decision.values = T, probability = T)
require(e1071)
require(caTools)
require(ROCR)
y_pred_radial <- predict(GaTSV, newdata = test_scaled, decision.values = T, probability = T)
View(test_scaled)
test <- add_last_feat(tp53_added)
test <- test[SPAN>=1e3|SPAN==-1,] #use allthe long SVs for testing the svm
test[, log_SPAN := log(SPAN, base = 10)]
test$log_SPAN[which(is.na(test$log_SPAN))] <- max(subset(test$log_SPAN, !is.na(test$log_SPAN)))
test$log_SPAN[which(is.infinite(test$log_SPAN))] <- max(subset(test$log_SPAN, !is.infinite(test$log_SPAN)))
features_tolog <- c('homlen','insertion_len','gnomad_d_bkpt1','gnomad_d_bkpt2','line_dist','sine_dist','num_sv_sample',
'sv_dist','sv_count_5Mbp')
log_feat <- function(x){
log_x <- log(x, base = 10)
log_x[which(is.na(log_x))] <- min(subset(log_x, !is.na(log_x)))
log_x[which(is.infinite(log_x))] <- 0
return((log_x))
}
test_sub_prelog <- test[, .SD,.SDcols = features_tolog]
test_sub_log <- data.table(apply(test_sub_prelog,2,FUN = log_feat))
colnames(test_sub_log) <- paste0('log_', colnames(test_sub_log))
test <- cbind(test, test_sub_log)
features_toscale<-c('log_homlen', 'log_insertion_len', 'log_SPAN', 'log_gnomad_d_bkpt1', 'log_gnomad_d_bkpt2', 'del', 'dup', 'inv', 'inter',
'hom_gc', 'insertion_gc', 'log_line_dist', 'log_sine_dist', 'log_num_sv_sample', 'CN_annot', 'exon_annot',
'log_sv_dist','log_sv_count_5Mbp', 'sv_reptime_left','sv_reptime_right','tp53_status')
test_df <- as.data.frame(test[,.SD,.SDcols=features_toscale]) #select the features to scale
test_scaled <- data.table()
for (i in colnames(test_df)){
row_l <- scaling_mat[which(scaling_mat$feature== i),]
feature_col <- test_df[grepl(i,colnames(test_df))]
scaled_feature <- (feature_col -(row_l$mean))/row_l$sd
test_scaled <- cbind(test_scaled,scaled_feature)
}
y_pred_radial <- predict(GaTSV, newdata = test_scaled, decision.values = T, probability = T)
probabilities_radial <-data.table(attr(y_pred_radial, 'probabilities'))
setcolorder(probabilities_radial, c('0', '1'))
View(probabilities_radial)
y_pred_radial <- predict(GaTSV, newdata = test_scaled, decision.values = T, probability = T)
probabilities_radial <-data.table(attr(y_pred_radial, 'probabilities'))
View(probabilities_radial)
require(data.table)
require(parallel)
require(gUtils)
require(data.table)
require(GenomicRanges)
require(parallel)
require(stats4)
require(BiocGenerics)
require(rlang)
require(S4Vectors)
require(IRanges)
require(GenomeInfoDb)
require(stringr)
require(e1071)
require(caTools)
require(ROCR)
library(rstudioapi)
#source('./processing_scripts.R') #store all source scripts for pre-processing
source('./annotation_scripts.R')
chk <- filter('C:/Users/wchukwu/Downloads/GaTSV_toy2.svaba.sv.vcf')
cat('Loading reference files...\n')
gnomad_hg38 = readRDS('../data/gnomAD.v4.hg38.rds')
gnomad_hg19 = readRDS('../data/gnomAD.v4.hg19.liftover.rds')
LINE_dt_hg38 = readRDS('../data/repeatmasker.hg38.LINE.bed')
SINE_dt_hg38 = readRDS('../data/repeatmasker.hg38.SINE.bed')
LINE_dt_hg19 = readRDS('../data/repeatmasker.hg19.LINE.bed')
SINE_dt_hg19 = readRDS('../data/repeatmasker.hg19.SINE.bed')
hg19_genes = readRDS('../data/gencode.genes.hg19.rds')
hg19_exons=readRDS('../data/gencode.exons.hg19.rds')
hg38_genes=readRDS('../data/gencode.genes.hg38.rds')
hg38_exons=readRDS('../data/gencode.exons.hg38.rds')
reptimedata_hg19 = readRDS('../data/reptime.hg19.rds')
#reptimedata_hg38 = readRDS('./data/reptime.hg38.rds') #unfortunately, we haven't processed a hg38 equivalent of the replication timing reference file.
metadata <- fread("../data/example_metadata.txt")
scaling_mat <- fread("../data/20240423_scalingmatrix.txt")
GaTSV <- readRDS("../data/20240407_svm.rda")
run_it <- function(file,n_cores,genome) {
bedpe <- file
bedpe[, chrom1 := gsub('chr','',chrom1)]
bedpe[, chrom2 := gsub('chr','',chrom2)]
bedpe$start1 <- as.numeric(bedpe$start1)
bedpe$start2 <- as.numeric(bedpe$start2)
bedpe$end1 <- as.numeric(bedpe$end1)
bedpe$end2 <- as.numeric(bedpe$end2)
fuzzy <- closest_germline(bp = bedpe, cores = n_cores, genome = genome)
line_sine <- closest_line_sine(bp = fuzzy, genome = genome, cores = n_cores)
cat("Finding distance to closest SV... \n")
nearest_sv_dist <- rbindlist(mclapply(1:nrow(line_sine), find_closest_sv, line_sine,mc.cores=n_cores))
cat("done. \n")
cat("Finding no of SVs in 5Mbp window... \n")
sv_annotated <- rbindlist(mclapply(1:nrow(nearest_sv_dist), count_sv_5mbp, nearest_sv_dist, mc.cores = n_cores))
cat("done. \n")
cat("Adding replication timing info... \n")
reptime_added <- rbindlist(mclapply(1:nrow(sv_annotated), rep_time, sv_annotated, genome=genome, mc.cores = n_cores))
cat("done. \n")
return(reptime_added)
}
tmp <- run_it(file = chk, n_cores = 1,genome='hg19')
View(chk)
chroms <-  c(as.character(c(1:22)),'X','Y')
tmp$chrom1 <- as.character(tmp$chrom1)
tmp$chrom2 <- as.character(tmp$chrom2)
store_indices = which(!tmp$chrom1 %in% chroms| !tmp$chrom2 %in% chroms) #done to address the observation that some SVs were mapping to hpv
bedpe_clean <- tmp[!store_indices,]
bedpe_clean$start1 <- as.numeric(bedpe_clean$start1)
bedpe_clean$start2 <- as.numeric(bedpe_clean$start2)
cat("Performing gene/exon annotation...")
bedpe_annot <- rbindlist(mclapply(1:nrow(bedpe_clean), annot_geneexon, bedpe_clean, genome='hg19',mc.cores = 1))
cat("done. \n")
cat("Checking TP53 status...")
tp53_added <- check_tp53(bedpe_annot)
cat("done. \n")
filename <- unlist(strsplit(tp53_added$name[1],"[.]"))[1]
write.table(tp53_added, paste0(filename,'_processed2.bedpe'), row.names = F, col.names = T, sep = "\t", quote = F)
#running the classifier
cutoff_prob <-  0.2684
test <- add_last_feat(tp53_added)
test <- test[SPAN>=1e3|SPAN==-1,] #use allthe long SVs for testing the svm
test[, log_SPAN := log(SPAN, base = 10)]
test$log_SPAN[which(is.na(test$log_SPAN))] <- max(subset(test$log_SPAN, !is.na(test$log_SPAN)))
test$log_SPAN[which(is.infinite(test$log_SPAN))] <- max(subset(test$log_SPAN, !is.infinite(test$log_SPAN)))
features_tolog <- c('homlen','insertion_len','gnomad_d_bkpt1','gnomad_d_bkpt2','line_dist','sine_dist','num_sv_sample',
'sv_dist','sv_count_5Mbp')
log_feat <- function(x){
log_x <- log(x, base = 10)
log_x[which(is.na(log_x))] <- min(subset(log_x, !is.na(log_x)))
log_x[which(is.infinite(log_x))] <- 0
return((log_x))
}
test_sub_prelog <- test[, .SD,.SDcols = features_tolog]
test_sub_log <- data.table(apply(test_sub_prelog,2,FUN = log_feat))
colnames(test_sub_log) <- paste0('log_', colnames(test_sub_log))
test <- cbind(test, test_sub_log)
features_toscale<-c('log_homlen', 'log_insertion_len', 'log_SPAN', 'log_gnomad_d_bkpt1', 'log_gnomad_d_bkpt2', 'del', 'dup', 'inv', 'inter',
'hom_gc', 'insertion_gc', 'log_line_dist', 'log_sine_dist', 'log_num_sv_sample', 'CN_annot', 'exon_annot',
'log_sv_dist','log_sv_count_5Mbp', 'sv_reptime_left','sv_reptime_right','tp53_status')
test_df <- as.data.frame(test[,.SD,.SDcols=features_toscale]) #select the features to scale
test_scaled <- data.table()
for (i in colnames(test_df)){
row_l <- scaling_mat[which(scaling_mat$feature== i),]
feature_col <- test_df[grepl(i,colnames(test_df))]
scaled_feature <- (feature_col -(row_l$mean))/row_l$sd
test_scaled <- cbind(test_scaled,scaled_feature)
}
View(test_scaled)
View(test)
y_pred_radial <- predict(GaTSV, newdata = test_scaled, decision.values = T, probability = T)
probabilities_radial <-data.table(attr(y_pred_radial, 'probabilities'))
View(probabilities_radial)
setcolorder(probabilities_radial, c('0', '1'))
probabilities_radial[,"pred_class"] <- lapply(1:length(probabilities_radial$`1`),function(i){
return (ifelse(probabilities_radial$`1`[i]>= cutoff_prob,'SOMATIC','GERMLINE'))})
View(probabilities_radial)
View(probabilities_radial)
table(probabilities_radial$pred_class)
table(as.character(probabilities_radial$pred_class))
test <- cbind(test,as.character(probabilities_radial$pred_class))
write.table(test, paste0(filename,'_classified.bedpe'), row.names = F, col.names = T, sep = "\t", quote = F)
View(test)
