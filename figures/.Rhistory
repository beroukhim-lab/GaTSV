}else{
return(data.table(cbind(basename(dt_path),'normal',nrow(dt[CLASS=='SOMATIC']),nrow(dt[CLASS=='GERMLINE']))))
}
}
lof <- list.files('Z:/wolu/testing_svaba/outputs/more_features/more_feat/',full.names = T)
outlier_samples <- rbindlist(lapply(lof,flag_outliers))
flag_outliers <- function(itter ,lof){ #reads in data table; annotates inversions by merging h2hinv and t2tinv; uses heuristic to flag outliers
dt <- fread(lof[itter])
dt[,sv_type := ifelse(chrom1 == chrom2, ifelse(strand1 == strand2, 'INV', ifelse(strand2 == "+", "DUP", "DEL")),"INTER")]
if(nrow(dt)>1000 & (nrow(dt[sv_type=='INV',])/nrow(dt))>0.5){
return(data.table(cbind(basename(dt_path),'outlier',nrow(dt[CLASS=='SOMATIC']),nrow(dt[CLASS=='GERMLINE']))))
}else{
return(data.table(cbind(basename(dt_path),'normal',nrow(dt[CLASS=='SOMATIC']),nrow(dt[CLASS=='GERMLINE']))))
}
}
flag_outliers <- function(itter ,lof){ #reads in data table; annotates inversions by merging h2hinv and t2tinv; uses heuristic to flag outliers
cat(itter,'\n')
dt <- fread(lof[itter])
dt[,sv_type := ifelse(chrom1 == chrom2, ifelse(strand1 == strand2, 'INV', ifelse(strand2 == "+", "DUP", "DEL")),"INTER")]
if(nrow(dt)>1000 & (nrow(dt[sv_type=='INV',])/nrow(dt))>0.5){
return(data.table(cbind(basename(dt_path),'outlier',nrow(dt[CLASS=='SOMATIC']),nrow(dt[CLASS=='GERMLINE']))))
}else{
return(data.table(cbind(basename(dt_path),'normal',nrow(dt[CLASS=='SOMATIC']),nrow(dt[CLASS=='GERMLINE']))))
}
}
outlier_samples <- rbindlist(lapply(1:length(lof),flag_outliers,lof))
flag_outliers <- function(itter ,lof){ #reads in data table; annotates inversions by merging h2hinv and t2tinv; uses heuristic to flag outliers
cat(itter,'\n')
dt <- fread(lof[itter])
dt[,sv_type := ifelse(chrom1 == chrom2, ifelse(strand1 == strand2, 'INV', ifelse(strand2 == "+", "DUP", "DEL")),"INTER")]
if(nrow(dt)>1000 & (nrow(dt[sv_type=='INV',])/nrow(dt))>0.5){
return(data.table(cbind(basename(lof[itter]),'outlier',nrow(dt[CLASS=='SOMATIC']),nrow(dt[CLASS=='GERMLINE']))))
}else{
return(data.table(cbind(basename(lof[itter]),'normal',nrow(dt[CLASS=='SOMATIC']),nrow(dt[CLASS=='GERMLINE']))))
}
}
outlier_samples <- rbindlist(lapply(1:length(lof),flag_outliers,lof))
View(outlier_samples)
onek_outliers <- subset(outlier_samples[V2=='outlier',])
View(onek_outliers)
lof2 <- paste0('Z:/wolu/testing_svaba/outputs/more_features/more_feat/',onek_outliers$V1)
flag_2koutliers <- function(itter ,lof){ #reads in data table; annotates inversions by merging h2hinv and t2tinv; uses heuristic to flag outliers
cat(itter,'\n')
dt <- fread(lof[itter])
dt[,sv_type := ifelse(chrom1 == chrom2, ifelse(strand1 == strand2, 'INV', ifelse(strand2 == "+", "DUP", "DEL")),"INTER")]
if(nrow(dt)>2000 & (nrow(dt[sv_type=='INV',])/nrow(dt))>0.5){
return(data.table(cbind(basename(lof[itter]),'outlier',nrow(dt[sv_type=='INV']),nrow(dt[CLASS=='SOMATIC']),nrow(dt[CLASS=='GERMLINE']))))
}else{
return(data.table(cbind(basename(lof[itter]),'normal',nrow(dt[sv_type=='INV']),nrow(dt[CLASS=='SOMATIC']),nrow(dt[CLASS=='GERMLINE']))))
}
}
outlier_samples2 <- rbindlist(lapply(1:length(lof2),flag_2koutliers,lof2))
View(outlier_samples2)
percent_inv <- function(itter ,lof){ #reads in data table; annotates inversions by merging h2hinv and t2tinv; uses heuristic to flag outliers
cat(itter,'\n')
dt <- fread(lof[itter])
dt[,sv_type := ifelse(chrom1 == chrom2, ifelse(strand1 == strand2, 'INV', ifelse(strand2 == "+", "DUP", "DEL")),"INTER")]
frac_inv <- nrow(dt[sv_type=='INV',])/nrow(dt)
return(cbind(basename(lof[itter]),frac_inv,nrow(dt),nrow(dt[CLASS=='SOMATIC']),nrow(dt[CLASS=='GERMLINE'])))
}
percent_inv <- rbindlist(lapply(1:length(lof),percent_inv,lof))
percent_inv <- function(itter ,lof){ #reads in data table; annotates inversions by merging h2hinv and t2tinv; uses heuristic to flag outliers
cat(itter,'\n')
dt <- fread(lof[itter])
dt[,sv_type := ifelse(chrom1 == chrom2, ifelse(strand1 == strand2, 'INV', ifelse(strand2 == "+", "DUP", "DEL")),"INTER")]
frac_inv <- nrow(dt[sv_type=='INV',])/nrow(dt)
return(data.table(cbind(basename(lof[itter]),frac_inv,nrow(dt),nrow(dt[CLASS=='SOMATIC']),nrow(dt[CLASS=='GERMLINE']))))
}
percent_inv <- rbindlist(lapply(1:length(lof),percent_inv,lof))
View(percent_inv)
library(ggplot2)
library(scales)
ggplot(data = percent_inv, aes(x=V3,y=frac_inv))+scale_x_log10()
percent_inv$V3 <- as.numeric(percent_inv$V3)
ggplot(data = percent_inv, aes(x=V3,y=frac_inv))+scale_x_log10()
percent_inv$frac_inv <- as.numeric(percent_inv$frac_inv)
ggplot(data = percent_inv, aes(x=V3,y=frac_inv))+scale_x_log10()
ggplot(data = percent_inv, aes(x=V3,y=frac_inv))+scale_x_log10()+geom_point()
ggplot(data = percent_inv, aes(x=V3,y=frac_inv))+scale_x_log10()+geom_point()+xlab('Number of SVs/Sample')+ylab('Fraction of Inversions')+
theme_classic()
sum(outlier_samples[V2!='outlier']$V3) #total number of somatic SVs we'd be working with
sum(as.numeric(outlier_samples[V2!='outlier']$V3)) #total number of somatic SVs we'd be working with
sum(as.numeric(outlier_samples[V2!='outlier']$V4)) #total number of germline SVs we'd be working with
colnames(percent_inv) <- c('sample_filename','frac_inv','tot_svs','som_ct','germ_ct')
?mkdir
tcga_metadata <- fread('Z:/wolu/testing_svaba/GaTSV/data/cohort_metadata.csv')
View(tcga_metadata)
onek_outliers[,uid:= unlist(strsplit(V1,'_combined'))[1]]
View(onek_outliers)
onek_outliers[,uid:= unlist(strsplit(V1,'_combined'))[1],by=V1]
View(onek_outliers)
onek_outliers <- merge(onek_outliers,tcga_metadata[,c('uid','project_code')])
View(onek_outliers)
colnames(onek_outliers) <- c('uid','sample_filepath','n_som','n_germ','project_code')
colnames(onek_outliers) <- c('uid','sample_filepath','outlier_status','n_som','n_germ','project_code')
colnames(onek_outliers) <- c('uid','sample_filename','outlier_status','n_som','n_germ','project_code')
onek_outliers <- merge(onek_outliers,percent_inv[,c('sample_filename','frac_inv','tot_svs')],by='sample_filename')
View(onek_outliers)
for (i in 1:nrow(percent_inv)){
row_c <- percent_inv[i,]
if(row_c$tot_svs>1000 & row_c$frac_inv>0.5){
next
}else{
sample_output <- paste0('Z:/wolu/testing_svaba/outputs/no_outliers/', row_c$sample_filename)
dt <- fread(paste0('Z:/wolu/testing_svaba/outputs/more_features/more_feat/',row_c$sample_filename))
write.table(dt, sample_output,sep = '\t', row.names = F, col.names = T, quote = F)
}
}
ggsave('Z:/wolu/testing_svaba/outputs/Figures/Main figures/pdf_figures/outliers_inv.pdf')
chk <- fread('Z:/wo')
chk <- fread('Z:/wolu/testing_svaba/outputs/gnomAD4.0/gnomad.v4.0.sv.chrY.vcf.bedpe')
View(chk)
library(data.table)
mild_assc <- readRDS('Z:/wolu/CCG_MILD/outputs/20240313_sigGenes.rds')
View(mild_assc)
mild_assc_q <- readRDS('Z:/wolu/CCG_MILD/outputs/20240313_clinicalQ_pvals.rds')
View(mild_assc_q)
q_valtab[, colSums(.SD <= 0.25)]
mild_assc[, colSums(.SD <= 0.25)]
#remove columns for Q5 and Q20 which seem to house quite a  and see what remains as significant
#there are some questions for which there are no significant genes; we can thin out our data by removing those
mild_assc_sub <- q_valtab[q_valtab[colSums(.SD <= 0.25) > 0,]]
#remove columns for Q5 and Q20 which seem to house quite a  and see what remains as significant
#there are some questions for which there are no significant genes; we can thin out our data by removing those
mild_assc_sub <- mild_assc[mild_assc[colSums(.SD <= 0.25) > 0,]]
mild_assc[colSums(.SD <= 0.25) > 0,]
mild_assc[colSums(.SD <= 0.25) > 0]
mild_assc_sub <- mild_assc[mild_assc[,colSums(.SD <= 0.25) > 0]]
mild_assc[,colSums(.SD <= 0.25) > 0]
mild_assc_sub <- mild_assc[mild_assc[,colSums(.SD <= 0.25) > 0],]
mild_assc_sub <- mild_assc[,mild_assc[,colSums(.SD <= 0.25) > 0]]
#remove columns for Q5 and Q20 which seem to house quite a  and see what remains as significant
#there are some questions for which there are no significant genes; we can thin out our data by removing those
mild_assc_sub <- mild_assc[,c(mild_assc[,colSums(.SD <= 0.25) > 0])]
c(mild_assc[,colSums(.SD <= 0.25) > 0])
as.vector(mild_assc[,colSums(.SD <= 0.25) > 0])
#remove columns for Q5 and Q20 which seem to house quite a  and see what remains as significant
#there are some questions for which there are no significant genes; we can thin out our data by removing those
mild_assc_sub <- mild_assc[,as.vector(mild_assc[,colSums(.SD <= 0.25) > 0])]
as.vector(mild_assc[,colSums(.SD <= 0.25) > 0])
mild_assc[,c(FALSE,TRUE)]
#remove columns for Q5 and Q20 which seem to house quite a  and see what remains as significant
#there are some questions for which there are no significant genes; we can thin out our data by removing those
mild_assc_sub <- mild_assc[,as.logical(as.vector(mild_assc[,colSums(.SD <= 0.25) > 0]))]
mild_assc[,as.logical(as.vector(mild_assc[,colSums(.SD <= 0.25) > 0]))]
#remove columns for Q5 and Q20 which seem to house quite a  and see what remains as significant
#there are some questions for which there are no significant genes; we can thin out our data by removing those
select_cols <- as.logical(as.vector(mild_assc[,colSums(.SD <= 0.25) > 0]))
mild_assc_sub <- mild_assc[,select_cols]
mild_assc_sub <- mild_assc[,c(select_cols)]
mild_assc_sub <- mild_assc[,c(paste0(select_cols,','))]
paste(select_cols,collapse = ',')
mild_assc_sub <- mild_assc[,as.logical(c(paste(select_cols,collapse = ',')))]
as.logical(c(paste(select_cols,collapse = ',')))
c(paste(select_cols,collapse = ','))
mild_assc_sub <- mild_assc[,c(paste(select_cols,collapse = ','))]
mild_assc_sub <- mild_assc
mild_assc_sub[,select_cols,with = FALSE]
mild_assc_sub <- mild_assc[,select_cols,with = FALSE]
mild_assc_sub <- cbind(mild_assc[,1],mild_assc[,select_cols,with = FALSE])
View(mild_assc_sub)
gc()
1+1
library(rhdf5)
h5read('C:/Users/wchukwu/Downloads/wes-do-gc.pon.hdf5')
library(rhdf5)
h5read('C:/Users/wchukwu/Downloads/wes-do-gc.pon.hdf5')
h5ls('C:/Users/wchukwu/Downloads/wes-do-gc.pon.hdf5')
library(data.table)
iconyc_pair <- fread('C:/Users/wchukwu/Downloads/iconyc_ff_pair.tsv')
atac_pair <- fread('C:/Users/wchukwu/Downloads/atacseq_pair.tsv')
View(iconyc_pair)
View(atac_pair)
atac_pair[c(1,8)]
c(1,8)
View(atac_pair[,c(1,8)])
subset_atac <- atac_pair[,c(1,8)]
colnames(subset_atac)[2] <- 'normal_output_counts_ff_wgs' #name same as the iconyc table
View(subset_atac)
iconyc_pair_upd <- rbind(iconyc_pair,subset_atac,fill=T)
View(iconyc_pair_upd)
write.table(iconyc_pair_upd,file = 'C:/Users/wchukwu/Downloads/iconyc_pair_upd.tsv',col.names = T,row.names = F,quote = F,sep = '\t')
View(atac_pair)
which('TCGA-44-6146'%in% iconyc_pair_upd$`entity:pair_id`)
which(grepl('TCGA-44-6146',iconyc_pair_upd$`entity:pair_id`))
View(table(iconyc_pair_upd$`entity:pair_id`))
#tag the 46 label with '_atac'
iconyc_pair_upd$`entity:pair_id`[46] <- 'TCGA-44-6146-atac'
View(table(iconyc_pair_upd$`entity:pair_id`))
write.table(iconyc_pair_upd,file = 'C:/Users/wchukwu/Downloads/iconyc_pair_upd.tsv',col.names = T,row.names = F,quote = F,sep = '\t')
atac_pair <- fread('C:/Users/wchukwu/Downloads/atacseq_pair.tsv')
atac_pair <- fread('C:/Users/wchukwu/Downloads/atacseq_pair.tsv')
subset_atac <- atac_pair[,c(1,8)]
colnames(subset_atac)[2] <- 'normal_output_counts_ff_wgs' #name same as the iconyc table
iconyc_pair_upd <- rbind(iconyc_pair,subset_atac,fill=T)
which(grepl('TCGA-44-6146',iconyc_pair_upd$`entity:pair_id`)) #8 46
#tag the 46 label with '_atac'
View(table(iconyc_pair_upd$`entity:pair_id`))
which(grepl('TCGA-BL-A13J',iconyc_pair_upd$`entity:pair_id`))
which(grepl('TCGA-44-6146',iconyc_pair_upd$`entity:pair_id`)) #8 46
which(grepl('TCGA-BL-A13J',iconyc_pair_upd$`entity:pair_id`)) #27 162
iconyc_pair_upd$`entity:pair_id`[46] <- 'TCGA-44-6146-atac'
iconyc_pair_upd$`entity:pair_id`[162] <- 'TCGA-BL-A13J-atac'
write.table(iconyc_pair_upd,file = 'C:/Users/wchukwu/Downloads/iconyc_pair_upd.tsv',col.names = T,row.names = F,quote = F,sep = '\t')
source("Z:/wolu/ICON/Manuscript/scripts/20240517_preprocessgatkTerratable.R")
library(data.table)
chk <- fread(cmd = paste0('grep -v "^@", "C:/Users/wchukwu/Downloads/submissions_17648adb-1807-4008-a482-fe4ef38283c2_VcfToIntervalList_workflow_cee11f37-4c6e-4548-972f-dee00973f253_call-VcfToIntervalList_output.VcfToIntervalList.interval_list'))
chk <- fread(cmd = paste0('grep -v "^@"', 'C:/Users/wchukwu/Downloads/submissions_17648adb-1807-4008-a482-fe4ef38283c2_VcfToIntervalList_workflow_cee11f37-4c6e-4548-972f-dee00973f253_call-VcfToIntervalList_output.VcfToIntervalList.interval_list'))
chk <- fread(cmd = paste('grep -v "^@"', 'C:/Users/wchukwu/Downloads/submissions_17648adb-1807-4008-a482-fe4ef38283c2_VcfToIntervalList_workflow_cee11f37-4c6e-4548-972f-dee00973f253_call-VcfToIntervalList_output.VcfToIntervalList.interval_list'),sep = '\t')
View(chk)
chk2 <- fread(cmd = paste('grep -v "^@"', 'C:/Users/wchukwu/Downloads/cnv_somatic_common_snps.interval_list'),sep = '\t')
chk_unique <- unique(chk, by=('V1','V2','V3','V4'))
chk_unique <- unique(chk, by=c('V1','V2','V3','V4'))
#make data table that saves sample name and the corresponding FF and FFPE seg file
iconyc_pair <- fread('C:/Users/wchukwu/Downloads/iconyc_ff_pair.tsv')
iconyc_ffpe_pair <- fread('C:/Users/wchukwu/Downloads/iconyc_ffpe_pair.tsv')
seg_file_table <- cbind(iconyc_pair$`entity:pair_id`,iconyc_pair$segfile_20240515,iconyc_ffpe_pair$segfile_20240515)
seg_file_table <- data.table(cbind(iconyc_pair$`entity:pair_id`,iconyc_pair$segfile_20240515,iconyc_ffpe_pair$segfile_20240515))
iconyc_ffpe_pair$`entity:pair_id`==iconyc_pair$`entity:pair_id`
colnames(seg_file_table) <- c('pair_id','segfile_ff','segfile_ffpe')
write.table(seg_file_table,'C:/Users/wchukwu/Downloads/seg_download.tsv',sep = '\t',quote = F,col.names = T,
row.names = F)
View(seg_file_table)
write.table(seg_file_table,'Z:/wolu/ICON/Manuscript/datatables/seg_download.tsv',sep = '\t',quote = F,col.names = T,
row.names = F)
source("Z:/wolu/ICON/Manuscript/scripts/20240517_preprocessgatkTerratable.R")
all_files <- list.dirs(path = "Z:/wolu/ICON/Manuscript/final_outputs/",full.names = T)
all_files <- list.files(path = "Z:/wolu/ICON/Manuscript/final_outputs/",full.names = T)
all_files <- list.dirs(path = "Z:/wolu/ICON/Manuscript/final_outputs/",full.names = T,recursive = T)
all_files <- list.files(path = "Z:/wolu/ICON/Manuscript/final_outputs/",full.names = T,recursive = T,pattern = '_FF.seg.txt')
#merge all ff seg files and add tags
library(data.table)
ff_dt <- data.table()
for (i in all_files){
cur_file <- fread(i)
ff_df <- rbind(ff_dt,cur_file)
}
for (i in all_files){
cur_file <- fread(i)
ff_dt <- rbind(ff_dt,cur_file)
}
rm(ff_df)
View(ff_dt)
all_files_ffpe <- list.files(path = "Z:/wolu/ICON/Manuscript/final_outputs/",full.names = T,recursive = T,pattern = '.seg.txt')
!(grepl('_FF.seg.txt',all_files_ffpe))
all_files_ffpe <- all_files_ffpe[!(grepl('_FF.seg.txt',all_files_ffpe))]
ffpe_dt <- data.table()
for (i in all_files_ffpe){
cur_file <- fread(i)
ffpe_dt <- rbind(ffpe_dt,cur_file)
}
seg_no_ff <- as.data.table(table(ff_dt$ID))
View(seg_no_ff)
seg_no_ff <- as.data.table(table(ff_dt$ID));colnames(seg_no_ff)<-c('ID','Number_of_Segments')
seg_no_ffpe <- as.data.table(table(ffpe_dt$ID));colnames(seg_no_ffpe)<-c('ID','Number_of_Segments')
View(seg_no_ffpe)
g <- ggplot(data = seg_no_ff,aes(x=ID,y=Number_of_Segments)) +geom_bar()
library(ggplot2)
g <- ggplot(data = seg_no_ff,aes(x=ID,y=Number_of_Segments)) +geom_bar()
g
g <- ggplot(data = seg_no_ff,aes(y=Number_of_Segments)) +geom_bar()
g
g <- ggplot(data = seg_no_ff,aes(x=ID,y=Number_of_Segments)) +geom_bar(stat="identity")
g
g <- ggplot(data = seg_no_ff,aes(x=ID,y=Number_of_Segments)) +geom_bar(stat="identity")+
theme(axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1))
g
g <- ggplot(data = seg_no_ff,aes(x=ID,y=Number_of_Segments)) +geom_bar(stat="identity",width = 0.1)+
theme(axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1))
g
g <- ggplot(data = seg_no_ff,aes(x=ID,y=Number_of_Segments)) +geom_bar(stat="identity",width = 0.3)+
theme(axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1))
g
g <- ggplot(data = seg_no_ff,aes(x=ID,y=Number_of_Segments)) +geom_bar(stat="identity",width = 0.3,fill='steelblue')+
theme(axis.text.x = element_text(angle = 45,hjust = 1,vjust = 1))
g
theme <- theme(panel.background = element_blank(),
panel.border=element_rect(color = "black", size = 1, fill=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background=element_blank(),
axis.text.x=element_text(colour="black", hjust = 1, vjust = 1, size = 20, angle = 45),
axis.text.y=element_text(colour="black", size = 20),
axis.title.x=element_text(colour="black", size = 20),
axis.title.y=element_text(colour="black", size = 20),
axis.ticks=element_line(colour="black"),
plot.margin=unit(c(1,1,1,1),"line"),
legend.background = element_rect(fill=alpha('blue', 0)),
plot.title = element_text(face = "bold", hjust = 0.5),
legend.title = element_blank(),
legend.text = element_text(size=15),
legend.key.height = unit(4, 'lines'))
g
theme <- theme(panel.background = element_blank(),
panel.border=element_rect(color = "black", linewidth  = 1, fill=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background=element_blank(),
axis.text.x=element_text(colour="black", hjust = 1, vjust = 1, size = 20, angle = 45),
axis.text.y=element_text(colour="black", size = 20),
axis.title.x=element_text(colour="black", size = 20),
axis.title.y=element_text(colour="black", size = 20),
axis.ticks=element_line(colour="black"),
plot.margin=unit(c(1,1,1,1),"line"),
legend.background = element_rect(fill=alpha('blue', 0)),
plot.title = element_text(face = "bold", hjust = 0.5),
legend.title = element_blank(),
legend.text = element_text(size=15),
legend.key.height = unit(4, 'lines'))
g <- ggplot(data = seg_no_ff,aes(x=ID,y=Number_of_Segments)) +geom_bar(stat="identity",width = 0.3,fill='steelblue')+
xlab('Sample') + ylab('Number of Segments') +ggtitle('Segment across Fresh Frozen Samples') +theme
g
theme <- theme(panel.background = element_blank(),
panel.border=element_rect(color = "black", linewidth  = 1, fill=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background=element_blank(),
axis.text.x=element_text(colour="black", hjust = 1, vjust = 1, size = 10, angle = 45),
axis.text.y=element_text(colour="black", size = 20),
axis.title.x=element_text(colour="black", size = 20),
axis.title.y=element_text(colour="black", size = 20),
axis.ticks=element_line(colour="black"),
plot.margin=unit(c(1,1,1,1),"line"),
legend.background = element_rect(fill=alpha('blue', 0)),
plot.title = element_text(face = "bold", hjust = 0.5),
legend.title = element_blank(),
legend.text = element_text(size=15),
legend.key.height = unit(4, 'lines'))
g <- ggplot(data = seg_no_ff,aes(x=ID,y=Number_of_Segments)) +geom_bar(stat="identity",width = 0.3,fill='steelblue')+
xlab('Sample') + ylab('Number of Segments') +ggtitle('Segment across Fresh Frozen Samples') +theme
g
theme <- theme(panel.background = element_blank(),
panel.border=element_rect(color = "black", linewidth  = 1, fill=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background=element_blank(),
axis.text.x=element_text(colour="black", hjust = 1, vjust = 1, size = 10, angle = 45),
axis.text.y=element_text(colour="black", size = 10),
axis.title.x=element_text(colour="black", size = 10),
axis.title.y=element_text(colour="black", size = 10),
axis.ticks=element_line(colour="black"),
plot.margin=unit(c(1,1,1,1),"line"),
legend.background = element_rect(fill=alpha('blue', 0)),
plot.title = element_text(face = "bold", hjust = 0.5),
legend.title = element_blank(),
legend.text = element_text(size=15),
legend.key.height = unit(4, 'lines'))
g <- ggplot(data = seg_no_ff,aes(x=ID,y=Number_of_Segments)) +geom_bar(stat="identity",width = 0.3,fill='steelblue')+
xlab('Sample') + ylab('Number of Segments') +ggtitle('Segment across Fresh Frozen Samples') +theme
g
theme <- theme(panel.background = element_blank(),
panel.border=element_rect(color = "black", linewidth  = 1, fill=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background=element_blank(),
axis.text.x=element_text(colour="black", hjust = 1, vjust = 1, size = 10, angle = 45),
axis.text.y=element_text(colour="black", size = 12),
axis.title.x=element_text(colour="black", size = 12),
axis.title.y=element_text(colour="black", size = 12),
axis.ticks=element_line(colour="black"),
plot.margin=unit(c(1,1,1,1),"line"),
legend.background = element_rect(fill=alpha('blue', 0)),
plot.title = element_text(face = "bold", hjust = 0.5),
legend.title = element_blank(),
legend.text = element_text(size=15),
legend.key.height = unit(4, 'lines'))
g <- ggplot(data = seg_no_ff,aes(x=ID,y=Number_of_Segments)) +geom_bar(stat="identity",width = 0.3,fill='steelblue')+
xlab('Sample') + ylab('Number of Segments') +ggtitle('Segment across Fresh Frozen Samples') +theme
g
ggsave(g,'Z:/wolu/ICON/Manuscript/figures/FF_segments.pdf')
ggsave(filename = 'Z:/wolu/ICON/Manuscript/figures/FF_segments.pdf',plot = g)
g2 <- ggplot(data = seg_no_ffpe,aes(x=ID,y=Number_of_Segments)) +geom_bar(stat="identity",width = 0.3,fill='steelblue')+
xlab('Sample') + ylab('Number of Segments') +ggtitle('Segment across FFPE Samples') +theme
ggsave(filename = 'Z:/wolu/ICON/Manuscript/figures/FFPE_segments.pdf',plot = g2)
View(seg_no_ffpe)
g <- ggplot(data = seg_no_ff,aes(x=ID,y=Number_of_Segments)) +geom_bar(stat="identity",width = 0.3,fill='steelblue')+
xlab('Sample') + ylab('Number of Segments') +ggtitle('Segment across Fresh Frozen Samples') +theme +ylim(c(1,300))
g
g <- ggplot(data = seg_no_ff,aes(x=ID,y=Number_of_Segments)) +geom_bar(stat="identity",width = 0.3,fill='steelblue')+
xlab('Sample') + ylab('Number of Segments') +ggtitle('Segment across Fresh Frozen Samples') +theme +ylim(c(0,300))
g
ggsave(filename = 'Z:/wolu/ICON/Manuscript/figures/FF_segments.pdf',plot = g)
g2 <- ggplot(data = seg_no_ffpe,aes(x=ID,y=Number_of_Segments)) +geom_bar(stat="identity",width = 0.3,fill='steelblue')+
xlab('Sample') + ylab('Number of Segments') +ggtitle('Segment across FFPE Samples') +theme +ylim(c(0,300))
ggsave(filename = 'Z:/wolu/ICON/Manuscript/figures/FFPE_segments.pdf',plot = g2)
#segment length distributions per sample
ff_dt[,SPAN:= as.numeric(loc.end)-as.numeric(loc.start)]
View(ff_dt)
ff_dt[,log10_span := log10(SPAN)]
ffpe_dt[,SPAN:= as.numeric(loc.end)-as.numeric(loc.start)]
ffpe_dt[,log10_span := log10(SPAN)]
View(ff_dt)
g3 <- ggplot(data = seg_no_ff,aes(x=ID,y=Number_of_Segments)) +geom_violin(fill='steelblue')+
xlab('Sample') + ylab('log10(Segment Length)') +ggtitle('Segment Lengths across Fresh Frozen Samples') +theme
g3
g3 <- ggplot(data = ff_dt,aes(x=ID,y=log10_SPAN)) +geom_violin(fill='steelblue')+
xlab('Sample') + ylab('log10(Segment Length)') +ggtitle('Segment Lengths across Fresh Frozen Samples') +theme
g3
g3 <- ggplot(data = ff_dt,aes(x=ID,y=log10_span)) +geom_violin(fill='steelblue')+
xlab('Sample') + ylab('log10(Segment Length)') +ggtitle('Segment Lengths across Fresh Frozen Samples') +theme
g3
install.packages('lvplot')
library(lvplot)
g3 <- ggplot(data = ff_dt,aes(x=ID,y=log10_span)) +geom_lv(fill='steelblue')+
xlab('Sample') + ylab('log10(Segment Length)') +ggtitle('Segment Lengths across Fresh Frozen Samples') +theme
g3
g3 <- ggplot(data = ff_dt,aes(x=ID,y=log10_span)) +geom_lv(fill='steelblue')+
xlab('Sample') + ylab('log10(Segment Length)') +ggtitle('Segment Lengths across Fresh Frozen Samples') +theme+ylim(c(0,10))
g3
g3 <- ggplot(data = ff_dt,aes(x=ID,y=log10_span)) +geom_lv(fill='steelblue')+
xlab('Sample') + ylab('log10(Segment Lengths)') +ggtitle('Segment Lengths across Fresh Frozen Samples') +theme+ylim(c(1,10))
g3
ggsave(filename = 'Z:/wolu/ICON/Manuscript/figures/FF_segment_lengths.pdf',plot = g3)
g4 <- ggplot(data = ffpe_dt,aes(x=ID,y=log10_span)) +geom_lv(fill='steelblue')+
xlab('Sample') + ylab('log10(Segment Lengths)') +ggtitle('Segment Lengths across FFPE Samples') +theme+ylim(c(1,10))
g4
ggsave(filename = 'Z:/wolu/ICON/Manuscript/figures/FFPE_segment_lengths.pdf',plot = g4)
View(ffpe_dt)
View(ffpe_dt)
total_sheet <- readRDS("C:/Users/wchukwu/Downloads/GaTSV/data/20240417_total_sheet.rds")
library(stringr)
total_sheet[,homlen:= nchar(HOMSEQ)]
library(data.table)
total_sheet[,homlen:= nchar(HOMSEQ)]
mean(total_sheet[CLASS=='GERMLINE',]$homlen)
mean(total_sheet[CLASS=='SOMATIC',]$homlen)
perf_by_tt <- fread("../data/performance_by_tumortype.txt")
perf_by_tt <- fread("C:/Users/wchukwu/Downloads/GatSV/data/performance_by_tumortype.txt")
View(perf_by_tt)
library(data.table)
library(ggplot2)
library(scales)
library(rstudioapi)
library(e1071)
library(ROCR)
library(caTools)
tcga_cohort_metadata <- fread("../data/20240417_cohort_metadata.csv")
setwd("C:/Users/wchukwu/Downloads/GaTSV/figures/")
tcga_cohort_metadata <- fread("../data/20240417_cohort_metadata.csv")
test_scaled <- readRDS("../data/20240424_testscaled.rds")
test_set <- readRDS("../data/20240422_testset.rds")
classifier_radial <- readRDS("../data/20240407_svm.rda")
perf_by_tt <- fread("../data/performance_by_tumortype.txt")
#run classifier on test set on determine ppv per sample
y_pred_radial <- predict(classifier_radial, newdata = test_scaled, decision.values = T, probability = T)
probabilities_radial <-data.table(attr(y_pred_radial, 'probabilities'))
colnames(probabilities_radial) <- c('prob.0','prob.1')
setcolorder(probabilities_radial, c('prob.0', 'prob.1'))
probabilities_radial[,pred_class := ifelse(prob.1>=0.2684,1,0)] #assign predicted classes 1=SOMATIC
test_set$pred_class <- probabilities_radial$pred_class
test_set[,called_actual := ifelse(sv_class==1 & pred_class==1,1,0)] #somatic and predicted correctly=1
#test_set[,sample_uid:=unlist(strsplit(name,'.svaba'))[1],by='name']
aggregate_pred <- as.data.table(aggregate(cbind(called_actual,pred_class,sv_class) ~ sample_name, test_set, FUN = sum))
aggregate_pred[,ppv:= called_actual/pred_class]
colnames(aggregate_pred)[1] <- 'uid' #change column name to match the metadata to enable merging
aggregate_pred <- merge(aggregate_pred,tcga_cohort_metadata[,c('uid','project_code')],by='uid')
View(aggregate_pred)
View(test_set)
###plotting
theme <- theme(panel.background = element_blank(),
panel.border=element_rect(color = "black", linewidth = 1, fill=NA),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background=element_blank(),
axis.text.x=element_text(colour="black", hjust = 1, vjust = 1, size = 20, angle = 45),
axis.text.y=element_text(colour="black", size = 20),
axis.title.x=element_text(colour="black", size = 20),
axis.title.y=element_text(colour="black", size = 20),
axis.ticks=element_line(colour="black"),
plot.margin=unit(c(1,1,1,1),"line"),
legend.background = element_rect(fill=alpha('blue', 0)),
plot.title = element_text(face = "bold", hjust = 0.5),
legend.title = element_blank(),
legend.text = element_text(size=15),
legend.key.height = unit(4, 'lines'))
ggplot(aggregate_pred,aes(x=sv_class,y=ppv,col=project_code))+geom_point()+ scale_x_log10()+theme+xlab('Somatic SVs in Test Set')+
ylab("Positive Predictive Value")
View(probabilities_radial)
View(test_scaled)
sum(test_set$called_actual)
sum(test_set$pred_class)
7037/234637
set.seed(1234)
table(test_set$sv_class)
sum(probabilities_radial$pred_class)
colSums(probabilities_radial>0.2684)
#run classifier on test set on determine ppv per sample
y_pred_radial <- predict(classifier_radial, newdata = test_scaled, decision.values = T, probability = T)
probabilities_radial <-data.table(attr(y_pred_radial, 'probabilities'))
View(probabilities_radial)
setcolorder(probabilities_radial, c('0', '1'))
View(probabilities_radial)
colnames(probabilities_radial) <- c('prob.0','prob.1')
probabilities_radial[,pred_class := ifelse(prob.1>=0.2684,1,0)] #assign predicted classes 1=SOMATIC
test_set$pred_class <- probabilities_radial$pred_class
test_set[,called_actual := ifelse(sv_class==1 & pred_class==1,1,0)] #somatic and predicted correctly=1
#test_set[,sample_uid:=unlist(strsplit(name,'.svaba'))[1],by='name']
aggregate_pred <- as.data.table(aggregate(cbind(called_actual,pred_class,sv_class) ~ sample_name, test_set, FUN = sum))
aggregate_pred[,ppv:= called_actual/pred_class]
colnames(aggregate_pred)[1] <- 'uid' #change column name to match the metadata to enable merging
aggregate_pred <- merge(aggregate_pred,tcga_cohort_metadata[,c('uid','project_code')],by='uid')
View(aggregate_pred)
ggplot(aggregate_pred,aes(x=sv_class,y=ppv,col=project_code))+geom_point()+ scale_x_log10()+theme+xlab('Somatic SVs in Test Set')+
ylab("Positive Predictive Value")
table(aggregate_pred$ppv<0.5,aggregate_pred$sv_class<10)
table(aggregate_pred$ppv<-.5)
aggregate_pred[,ppv:= called_actual/pred_class]
table(aggregate_pred$ppv<0.5)
fisher.test(table(aggregate_pred$ppv<0.5,aggregate_pred$sv_class<10))
13/81
81/94
11/234
